syntax = "proto3";

package crashreplication;

// A single collision record.
message CrashRecord {
  string crash_date                = 1;   // example "09/11/2021"
  string crash_time                = 2;   // example "2:39"
  string borough                   = 3;
  int32 zip_code                   = 4;
  double latitude                  = 5;
  double longitude                 = 6;
  string location                  = 7;
  string on_street_name            = 8;
  string cross_street_name         = 9;
  string off_street_name           = 10;
  int32 num_persons_injured        = 11;
  int32 num_persons_killed         = 12;
  int32 num_pedestrians_injured    = 13;
  int32 num_pedestrians_killed     = 14;
  int32 num_cyclist_injured        = 15;
  int32 num_cyclist_killed         = 16;
  int32 num_motorist_injured       = 17;
  int32 num_motorist_killed        = 18;
  repeated string contributing_factors = 19;
  int64 collision_id               = 20;
  repeated string vehicle_types    = 21;
  int32 row_id = 22;
}

// Acknowledge receipt
message Ack {
  bool success = 1;
  string message = 2;
}

message VoteRequest {
  int32 term = 1;
  string candidate_id = 2;
  float score = 3;
  float disk_percent = 4;
  float memory_stored_mb = 5;
}

message VoteResponse {
  int32 term = 1;
  bool vote_granted = 2;
  string voter_id = 3;
}

message HeartbeatAckRequest {
  int32 term = 1;
  string follower_id = 2;
  bool success = 3;
}

message HeartbeatAckResponse {
  bool received = 1;
}

message ResourceScoreRequest {
  string original_requester = 1;
  repeated string visited_nodes = 2;
}

message ResourceScoreResponse {
  string server_id = 1;
  float score = 2;
  float load_avg = 3;
  float io_wait = 4;
  float net_usage_mb = 5;
  float memory_stored_mb = 6;
  repeated ResourceScore collected_scores = 7;
}

message ResourceScore {
  string server_id = 1;
  float score = 2;
  float load_avg = 3;
  float io_wait = 4;
  float net_usage_mb = 5;
  float memory_stored_mb = 6;
}

message AppendEntriesRequest {
  int32 term = 1;
  string leader_id = 2;
  string message_id = 3;  // For deduplication in flooding
  int32 ttl = 4;          // To prevent infinite forwarding
  // In a full implementation, you would include more fields for log replication
}

message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
}

message LeaderRequest {
  // Empty request
}

message ServerEndpoint {
  string server_id = 1;
  string address = 2;
  int32 port = 3;
}

message LeaderResponse {
  bool is_leader = 1;
  string leader_address = 2;
  int32 leader_port = 3;
  repeated ServerEndpoint server_endpoints = 4;
}

message QueryRequest {
  int32 row_id = 1;
}

message QueryResponse {
  string origin_node = 1;
  string replica_node = 2;
  CrashRecord record = 3;
}

// New messages for node registration and topology management
message RegisterNodeRequest {
  string node_id = 1;
  string address = 2;
  int32 port = 3;
}

message RegisterNodeResponse {
  bool success = 1;
  string current_leader = 2;
  repeated string nodes = 3;
}

message TopologyUpdateRequest {
  string update_type = 1;  // "add" or "remove"
  string node_id = 2;
  string address = 3;
  int32 port = 4;
}

message TopologyUpdateResponse {
  bool success = 1;
}

message NodeInfo {
  string node_id = 1;
  string address = 2;
  int32 port = 3;
}

message GetAllNodesRequest {}

message GetAllNodesResponse {
  repeated NodeInfo nodes = 1;
}

// Service for streaming crash records
service CrashReplicator {
  // Client-side streaming RPC
  rpc SendCrashes(stream CrashRecord) returns (Ack);
  
  // Raft methods
  rpc RequestVote(VoteRequest) returns (VoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);

  // Method for leader discovery
  rpc GetLeader(LeaderRequest) returns (LeaderResponse);

  rpc HeartbeatAck(HeartbeatAckRequest) returns (HeartbeatAckResponse);

  rpc QueryRow(QueryRequest) returns (QueryResponse);

  rpc PropagateResourceScore(ResourceScoreRequest) returns (ResourceScoreResponse);

  // New methods for network resilience
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse);
  rpc UpdateTopology(TopologyUpdateRequest) returns (TopologyUpdateResponse);
  rpc GetAllNodes(GetAllNodesRequest) returns (GetAllNodesResponse);
}